"use strict";

var _path = _interopRequireDefault(require("path"));

var _babelPluginTester = _interopRequireDefault(require("babel-plugin-tester"));

var _ = _interopRequireDefault(require(".."));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { keys.push.apply(keys, Object.getOwnPropertySymbols(object)); } if (enumerableOnly) keys = keys.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var filename = _path.default.resolve(__dirname, '..', '__fixtures__', 'messages.js');

var defaultTest = {
  title: 'default',
  code: `
import { FormattedMessage } from 'react-intl';

<FormattedMessage defaultMessage="hello" />;
`
};
var multiUseTest = {
  title: 'multiple uses',
  code: `
import { FormattedMessage } from 'react-intl';

<FormattedMessage defaultMessage="hello" />;
<FormattedMessage defaultMessage="another" />;
`
};
var allSupportedComponentsTest = {
  title: 'import all supported components',
  code: `
import { FormattedHTMLMessage, FormattedMessage } from 'react-intl';

<FormattedHTMLMessage defaultMessage="<span>hello</span>" />;
<FormattedMessage defaultMessage="hello" />;
`
};
var withValueInMessageTest = {
  title: 'with a value interpolated in the message',
  code: `
import { FormattedMessage } from 'react-intl';

<FormattedMessage defaultMessage={\`hello world ${1 + 1}\`} />;
`
};
var withVariableMessageTest = {
  title: 'with a variable as the defaultMessage',
  code: `
import { FormattedMessage } from 'react-intl';

const message = "variable message";

<FormattedMessage defaultMessage={message} />;
`
};
var importAsTest = {
  title: 'with FormattedMessage imported as something else',
  code: `
import { FormattedMessage as T } from 'react-intl';

<T defaultMessage="hello" />;
`
};
var nestedJSXTest = {
  title: 'with FormattedMessage nested in other JSX',
  code: `
import { FormattedMessage } from 'react-intl';

<div>
  <FormattedMessage defaultMessage="hello" />
</div>
`
};
var throwWhenNotAnalyzableTest = {
  title: 'throws if defaultMessage isnâ€™t analyzable',
  code: `
import { FormattedMessage } from 'react-intl';

const getMsg = () => 'hello';

<FormattedMessage defaultMessage={getMsg()} />;
`,
  error: /\[React Intl Auto\] defaultMessage must be statically evaluate\x2Dable for extraction/,
  snapshot: false
};
var notTransformIfNotImportedTest = {
  title: 'does nothing if components not imported from react-intl',
  snapshot: false,
  code: `
import any from 'any-module';
<FormattedMessage defaultMessage={getMsg()} />;
`
};
var notTransformIfSpreadAttributeTest = {
  title: 'does nothing if component props are spread',
  snapshot: false,
  code: `
import { FormattedMessage } from 'react-intl';
const props = {
  defaultMessage: 'hello'
};
<FormattedMessage {...props} />;
`
};
var keyTest = {
  title: 'using key',
  code: `
import { FormattedMessage } from 'react-intl';

<FormattedMessage key="foobar" defaultMessage="hello" />;
`
};
var tests = [defaultTest, multiUseTest, allSupportedComponentsTest, withValueInMessageTest, withVariableMessageTest, importAsTest, nestedJSXTest, throwWhenNotAnalyzableTest, notTransformIfNotImportedTest, notTransformIfSpreadAttributeTest, keyTest];
cases([{
  title: 'default',
  tests
}, {
  title: 'useKey = true',
  tests: [defaultTest, keyTest],
  pluginOptions: {
    useKey: true
  }
}, {
  title: 'removePrefix = "src"',
  tests: [defaultTest],
  pluginOptions: {
    removePrefix: 'src'
  }
}, {
  title: 'removePrefix = "src/" -- with slash',
  tests: [defaultTest],
  pluginOptions: {
    removePrefix: 'src/'
  }
}, {
  title: 'filebase = true',
  tests: [defaultTest],
  pluginOptions: {
    filebase: true
  }
}, {
  title: 'includeExportName = true',
  tests: [defaultTest],
  pluginOptions: {
    includeExportName: true
  }
}, {
  title: 'includeExportName = all',
  tests: [defaultTest],
  pluginOptions: {
    includeExportName: 'all'
  }
}, {
  title: 'removePrefix = true, includeExportName = true',
  tests: [defaultTest],
  pluginOptions: {
    removePrefix: true,
    includeExportName: true
  }
}, {
  title: 'removePrefix = false',
  tests: [defaultTest],
  pluginOptions: {
    removePrefix: false
  }
}, {
  title: 'removePrefix = true, includeExportName = all',
  tests: [defaultTest],
  pluginOptions: {
    removePrefix: true,
    includeExportName: 'all'
  }
}, {
  title: 'extractComments = false',
  tests: [defaultTest],
  pluginOptions: {
    extractComments: false
  }
}, {
  title: 'removePrefix = /__fixtures__/',
  tests: [defaultTest],
  pluginOptions: {
    removePrefix: /[\/\\]__fixtures__/
  }
}, {
  title: 'removePrefix = "src.__fixtures__"',
  tests: [defaultTest],
  pluginOptions: {
    removePrefix: 'src.__fixtures__'
  }
}]);

function cases(testCases) {
  var defaultOpts = {
    title: '',
    plugin: _.default,
    snapshot: true,
    babelOptions: {
      filename,
      parserOpts: {
        plugins: ['jsx']
      }
    },
    tests: []
  };
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = testCases[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var testCase = _step.value;
      testCase.tests = testCase.tests.map(function (t) {
        return _objectSpread({}, t, {
          title: t.title
        });
      });
      (0, _babelPluginTester.default)(_objectSpread({}, defaultOpts, {}, testCase));
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}