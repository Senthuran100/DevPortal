"use strict";

var _path = _interopRequireDefault(require("path"));

var _babelPluginTester = _interopRequireDefault(require("babel-plugin-tester"));

var _ = _interopRequireDefault(require(".."));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { keys.push.apply(keys, Object.getOwnPropertySymbols(object)); } if (enumerableOnly) keys = keys.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var filename = _path.default.resolve(__dirname, '..', '__fixtures__', 'messages.js');

var defaultTest = {
  title: 'default',
  code: `
import { defineMessages } from 'react-intl'

export default defineMessages({
  hello: 'hello',
})
`
};
var multiExportTest = {
  title: 'multi export',
  code: `
import { defineMessages } from 'react-intl'

export const extra = defineMessages({
  hello: 'hello world extra'
})

export default defineMessages({
  hello: 'hello world',
})
`
};
var leadingCommentTest = {
  title: 'leading comment',
  code: `
import { defineMessages } from 'react-intl'

export default defineMessages({
  // The main Hello of our app.
  hello: 'hello',

  // Another Hello,
  // multiline this time
  world: {
    id: 'hello.world',
    defaultMessage: 'hello world',
  }
})
`
};
var leadingCommentWithDescriptionTest = {
  title: 'leading comment with description',
  code: `
import { defineMessages } from 'react-intl'

export default defineMessages({

  // This comment should not be used
  world: {
    defaultMessage: 'hello world',
    description: 'The hello world',
  }
})
`
};
var tests = [defaultTest, {
  title: 'with include value',
  code: `
import { defineMessages } from 'react-intl'

defineMessages({
  hello: \`hello world \${1}\`,
})
      `
}, {
  title: 'string literal',
  code: `
import { defineMessages } from 'react-intl'

defineMessages({
  'hello': 'hello world'
})
      `
}, {
  title: 'Object',
  code: `
import { defineMessages } from 'react-intl'

defineMessages({
  new: {
    id: 'this is id',
    defaultMessage: 'id',
  },
  world: {
    defaultMessage: 'world',
  },
  headerTitle: {
    defaultMessage: 'Welcome to dashboard {name}!',
    description: 'Message to greet the user.',
  },
})
      `
}, {
  title: 'import as',
  code: `
import { defineMessages as m } from 'react-intl'

m({
  hello: 'hello'
})

`
}, {
  title: 'with other func',
  code: `
import { defineMessages } from 'react-intl'

defineMessages({
  hello: 'hello',
})

hello({
  id: 'hoge',
})
    `
}, multiExportTest, {
  title: 'throw error when key is NumiricLiteral',
  code: `
import { defineMessages } from 'react-intl'

export default defineMessages({
  1: 'hello',
})
`,
  error: /requires Object key or string literal/,
  snapshot: false
}, {
  title: 'not transform if defineMessages is not imported',
  code: `
import any from 'any-module'

export default defineMessages({
  hello: 'hello'
})
    `
}, {
  title: 'not transform when defineMessages argumens is not object',
  code: `
import { defineMessages } from 'react-intl'

export default defineMessages(1)
    `
}, {
  title: 'when using the variable',
  code: `
import { defineMessages } from 'react-intl'

const messages = {hello: 'hello'}

export default defineMessages(messages)
    `
}, {
  title: 'not transfrom when the variable can not be found',
  code: `
import { defineMessages } from 'react-intl'

export default defineMessages(messages)
    `
}, {
  title: 'not transform when defineMessages argumens is empty',
  code: `
import { defineMessages } from 'react-intl'

export default defineMessages()
    `
}, {
  title: 'not transform if callee is not identifier',
  code: `
import { defineMessages } from 'react-intl'

const m = [defineMessages]

export default m[0]({
  hello: 'hello world'
})
    `
}, {
  title: 'with other specifier',
  code: `
import { defineMessages, FormattedMessage } from 'react-intl'

export default defineMessages({
  hello: 'hello world',
})
    `
}, leadingCommentTest, leadingCommentWithDescriptionTest, {
  title: 'eval string',
  // only: true,
  code: `
import { defineMessages } from 'react-intl'

export default defineMessages({
  hello: 'hello' + 'world',
})
    `
}];
cases([{
  title: 'default',
  tests
}, {
  title: 'removePrefix = "src"',
  tests: [defaultTest],
  pluginOptions: {
    removePrefix: 'src'
  }
}, {
  title: 'removePrefix = "src/" -- with slash',
  tests: [defaultTest],
  pluginOptions: {
    removePrefix: 'src/'
  }
}, {
  title: 'filebase = true',
  tests: [defaultTest],
  pluginOptions: {
    filebase: true
  }
}, {
  title: 'includeExportName = true',
  tests: [defaultTest, multiExportTest],
  pluginOptions: {
    includeExportName: true
  }
}, {
  title: 'includeExportName = all',
  tests: [defaultTest, multiExportTest],
  pluginOptions: {
    includeExportName: 'all'
  }
}, {
  title: 'removePrefix = true, includeExportName = true',
  tests: [defaultTest, multiExportTest],
  pluginOptions: {
    removePrefix: true,
    includeExportName: true
  }
}, {
  title: 'removePrefix = false',
  tests: [defaultTest, multiExportTest],
  pluginOptions: {
    removePrefix: false
  }
}, {
  title: 'removePrefix = true, includeExportName = all',
  tests: [defaultTest, multiExportTest],
  pluginOptions: {
    removePrefix: true,
    includeExportName: 'all'
  }
}, {
  title: 'extractComments = false',
  tests: [defaultTest, leadingCommentTest, leadingCommentWithDescriptionTest],
  pluginOptions: {
    extractComments: false
  }
}, {
  title: 'removePrefix = /__fixtures__/',
  tests: [defaultTest],
  pluginOptions: {
    removePrefix: /src[\/\\]__f(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+?_/,
    includeExportName: true
  }
}, {
  title: 'removePrefix = "src.__fixtures__"',
  tests: [defaultTest],
  pluginOptions: {
    removePrefix: 'src.__fixtures__'
  }
}, {
  title: 'removePrefix = "src.__fixtures__", includeExportName = true',
  tests: [defaultTest, multiExportTest],
  pluginOptions: {
    removePrefix: 'src.__fixtures__',
    includeExportName: true
  }
}]);

function cases(testCases) {
  var defaultOpts = {
    title: '',
    plugin: _.default,
    snapshot: true,
    babelOptions: {
      filename
    },
    tests: []
  };
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = testCases[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var testCase = _step.value;
      testCase.tests = testCase.tests.map(function (t) {
        return _objectSpread({}, t, {
          title: t.title
        });
      });
      (0, _babelPluginTester.default)(_objectSpread({}, defaultOpts, {}, testCase));
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}